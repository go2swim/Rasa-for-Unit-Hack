# Файл: .gitignore
# Содержимое:
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc


================================================================================

# Файл: api_document.txt
# Содержимое:
Документация API: Сервис Распознавания Намерений и Сущностей (NLU)

Обзор
Данный API-сервис предназначен для анализа текста на естественном языке (русском) с целью определения намерения (intent) пользователя и извлечения из текста ключевых сущностей (entities). Это позволяет преобразовывать свободные текстовые запросы в структурированные данные, которые могут быть использованы для дальнейшей обработки, например, для формирования запросов к базе данных или выполнения определенных действий.
Сервис построен на базе Rasa NLU.

Базовый URL
Для локальной разработки (когда Rasa сервер запущен на вашей машине):
http://localhost:5005

При развертывании на сервере, замените localhost:5005 на актуальный адрес и порт вашего Rasa сервера.

Эндпоинт
Анализ текста (NLU Parse)
URL: /model/parse
Метод: POST
Описание: Принимает текстовую строку и возвращает JSON-объект с результатами NLU-анализа, включая наиболее вероятное намерение и список извлеченных сущностей.

Headers:
    Content-Type: application/json

Тело запроса (Request Body):
JSON-объект с одним обязательным ключом text.
{
  "text": "Текстовый запрос пользователя"
}
    text (string, required): Текстовая строка, которую необходимо проанализировать.

Ответ (Response):
При успехе (Код 200 OK):
JSON-объект следующей структуры:
{
  "text": "Оригинальный текст запроса пользователя",
  "intent": {
    "id": -7369890801234567890, // Пример ID, может меняться
    "name": "имя_наиболее_вероятного_интента",
    "confidence": 0.9985123872756958
  },
  "entities": [
    {
      "entity": "тип_сущности_1",
      "start": 6,
      "end": 20,
      "confidence_entity": 0.9701234567890123,
      "value": "извлеченное_значение_сущности_1",
      "extractor": "DIETClassifier",
      "processors": ["EntitySynonymMapper"] // Если применялся синонимайзер
    },
    {
      "entity": "тип_сущности_2",
      "start": 30,
      "end": 40,
      "confidence_entity": 0.9212345678901234,
      "value": "извлеченное_значение_сущности_2",
      "extractor": "DIETClassifier",
      "role": "имя_роли" // Если для сущности была определена роль
    }
    // ... другие извлеченные сущности
  ],
  "intent_ranking": [
    {
      "id": -7369890801234567890,
      "name": "имя_наиболее_вероятного_интента",
      "confidence": 0.9985123872756958
    },
    {
      "id": 1234567890123456789,
      "name": "имя_второго_по_вероятности_интента",
      "confidence": 0.0012345678901234567
    }
    // ... остальные интенты с их уверенностью
  ],
  "response_selector": { // Информация от ResponseSelector, если он используется
    "all_retrieval_intents": [],
    "default": {
      "response": {
        "id": null,
        "responses": null,
        "response_templates": null,
        "confidence": 0.0,
        "intent_response_key": null,
        "utter_action": "utter_None",
        "template_name": "utter_None"
      },
      "ranking": []
    }
  }
}

Описание полей ответа:
    text (string): Оригинальный текст, отправленный в запросе.
    intent (object): Объект, описывающий наиболее вероятное намерение.
        id (long): Уникальный идентификатор интента.
        name (string): Имя распознанного намерения (например, search_person, greet).
        confidence (float): Уровень уверенности модели в этом намерении (от 0.0 до 1.0).
    entities (array of objects): Массив объектов, где каждый объект представляет извлеченную сущность. Если сущности не найдены, массив будет пустым.
        entity (string): Тип сущности (например, name, department, date, skill).
        start (integer): Начальный индекс (с 0) первого символа значения сущности в исходной строке text.
        end (integer): Конечный индекс (не включая) последнего символа значения сущности в исходной строке text.
        confidence_entity (float): Уровень уверенности модели в извлечении этой сущности.
        value (string): Извлеченное текстовое значение сущности. После применения EntitySynonymMapper здесь будет каноническое значение.
        extractor (string): Имя компонента Rasa, который извлек эту сущность (например, DIETClassifier, RegexFeaturizer, DucklingEntityExtractor).
        processors (array of string, optional): Список обработчиков, которые модифицировали сущность (например, EntitySynonymMapper).
        role (string, optional): Если для сущности была определена и извлечена роль (например, "lead" для сущности "project"), она будет указана здесь.
    intent_ranking (array of objects): Массив всех возможных намерений, отсортированных по убыванию уверенности. Полезно для отладки или реализации более сложной логики.
        id (long): Уникальный идентификатор интента.
        name (string): Имя интента.
        confidence (float): Уровень уверенности.
    response_selector (object): Информация от компонента ResponseSelector (если используется для выбора ответа).

При ошибке: Стандартные HTTP-коды ошибок (например, 4xx, 5xx) с JSON-телом, описывающим ошибку (зависит от конфигурации Rasa).

Текущие поддерживаемые Интенты и Сущности
На данный момент модель обучена распознавать следующие основные интенты и сущности (согласно domain.yml):

*   Интенты (Намерения):
    *   `greet`: Приветствие.
    *   `goodbye`: Прощание.
    *   `affirm`: Утвердительный ответ.
    *   `deny`: Отрицательный ответ.
    *   `bot_challenge`: Проверка, является ли собеседник ботом.
    *   `search_person`: Запрос на поиск сотрудника.
        *   Может включать фильтрацию по имени, отделу, проекту (включая роль "ответственный за проект"), навыкам/технологиям, точному возрасту, возрасту старше/младше, спецификатору дня рождения (включая "скоро", "на этой неделе").
    *   `search_event`: Запрос на поиск мероприятия.
    *   `find_birthday`: Запрос на поиск дней рождения (общий, не как атрибут конкретного сотрудника).
    *   `check_task`: Запрос на проверку задач.
    *   `check_employment_calendar`: Запрос на проверку календаря занятости.

*   Сущности (Entities):
    *   `name`: Имя, фамилия или ФИО человека.
    *   `department`: Название отдела.
    *   `project`: Название проекта. Может иметь роль `lead`, если пользователь ищет ответственного за проект.
    *   `skill`: Навык или технология (например, "Python", "Java", "дизайн").
    *   `event_name`: Название мероприятия.
    *   `date`: Дата или период времени (например, "завтра", "в июне", "25 мая"). Распознается DIETClassifier, для более точного распознавания дат рекомендуется настроить DucklingHTTPExtractor.
    *   `task_name`: Название задачи.
    *   `age_exact`: Точный возраст (число).
    *   `age_older_than`: Возраст для условия "старше чем" (число).
    *   `age_younger_than`: Возраст для условия "младше чем" (число).
    *   `birthday_specifier`: Описание дня рождения или периода (например, "в июне", "завтра", "скоро", "на этой неделе"). Может пересекаться с `date`.

Примеры Запросов и Ответов

Пример 1: Поиск сотрудника
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Найди Иванова Петра из отдела разработки"
  }'
Ожидаемый ответ (структура):
{
  "text": "Найди Иванова Петра из отдела разработки",
  "intent": { "name": "search_person", "confidence": 0.99... },
  "entities": [
    { "entity": "name", "value": "Иванова Петра", ... },
    { "entity": "department", "value": "разработки", ... }
  ], ...
}

Пример 2: Поиск мероприятия
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Какие корпоративы будут на следующей неделе?"
  }'
Ожидаемый ответ (структура):
{
  "text": "Какие корпоративы будут на следующей неделе?",
  "intent": { "name": "search_event", "confidence": 0.97... },
  "entities": [
    { "entity": "event_name", "value": "корпоративы", ... },
    { "entity": "date", "value": "на следующей неделе", ... }
  ], ...
}

Пример 3: Простой запрос без сущностей
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Привет" }'
Ожидаемый ответ (структура):
{
  "text": "Привет",
  "intent": { "name": "greet", "confidence": 0.99... },
  "entities": [], ...
}

Пример 4: Запрос с синонимом
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Где Женя из маркетинга?" }'
Ожидаемый ответ (структура):
{
  "text": "Где Женя из маркетинга?",
  "intent": { "name": "search_person", "confidence": 0.98... },
  "entities": [
    { "entity": "name", "value": "Евгений", ... }, // EntitySynonymMapper заменил "Женя" на "Евгений"
    { "entity": "department", "value": "маркетинга", ... }
  ], ...
}

Пример 5: Поиск сотрудника с указанием возраста
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Найди Марию из IT которой 30 лет" }'
Ожидаемый ответ (структура):
{
  "text": "Найди Марию из IT которой 30 лет",
  "intent": { "name": "search_person", "confidence": 0.99... },
  "entities": [
    { "entity": "name", "value": "Марию", ... },
    { "entity": "department", "value": "IT", ... },
    { "entity": "age_exact", "value": "30", ... }
  ], ...
}

Пример 6: Поиск сотрудника с указанием дня рождения и возраста
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Покажи сотрудников, у которых день рождения завтра и они старше 25" }'
Ожидаемый ответ (структура):
{
  "text": "Покажи сотрудников, у которых день рождения завтра и они старше 25",
  "intent": { "name": "search_person", "confidence": 0.98... },
  "entities": [
    { "entity": "birthday_specifier", "value": "завтра", ... },
    { "entity": "age_older_than", "value": "25", ... }
  ], ...
}

Пример 7: Поиск ответственного за проект
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Кто отвечает за проект SpringSale в маркетинге?" }'
Ожидаемый ответ (структура):
{
  "text": "Кто отвечает за проект SpringSale в маркетинге?",
  "intent": { "name": "search_person", "confidence": 0.99... },
  "entities": [
    { "entity": "project", "value": "SpringSale", "role": "lead", ... },
    { "entity": "department", "value": "маркетинге", ... }
  ], ...
}

Пример 8: Поиск по навыку
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "Найди программистов на Python" }'
Ожидаемый ответ (структура):
{
  "text": "Найди программистов на Python",
  "intent": { "name": "search_person", "confidence": 0.98... },
  "entities": [
    { "entity": "skill", "value": "Python", ... }
  ], ...
}

Пример 9: Поиск людей, у которых скоро ДР
Запрос:
curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{ "text": "У кого из отдела продаж день рождения скоро?" }'
Ожидаемый ответ (структура):
{
  "text": "У кого из отдела продаж день рождения скоро?",
  "intent": { "name": "search_person", "confidence": 0.97... },
  "entities": [
    { "entity": "department", "value": "отдела продаж", ... },
    { "entity": "birthday_specifier", "value": "скоро", ... }
  ], ...
}

Запуск сервиса
Для работы API необходимо, чтобы сервер Rasa был запущен с включенным HTTP API. Команда для запуска (выполняется в корневой директории проекта Rasa):
rasa run --enable-api --cors "*" -p 5005
    --enable-api: Включает HTTP API.
    --cors "*": Разрешает Cross-Origin Resource Sharing для всех источников (для разработки). В продакшене рекомендуется настроить более строгие правила CORS.
    -p 5005: Указывает порт (можно изменить при необходимости).

================================================================================

# Файл: api_document.txt~
# Содержимое:
Документация API: Сервис Распознавания Намерений и Сущностей (NLU)
Обзор

Данный API-сервис предназначен для анализа текста на естественном языке (русском) с целью определения намерения (intent) пользователя и извлечения из текста ключевых сущностей (entities). Это позволяет преобразовывать свободные текстовые запросы в структурированные данные, которые могут быть использованы для дальнейшей обработки, например, для формирования запросов к базе данных или выполнения определенных действий.

Сервис построен на базе Rasa NLU.

Базовый URL

Для локальной разработки (когда Rasa сервер запущен на вашей машине):
http://localhost:5005

При развертывании на сервере, замените localhost:5005 на актуальный адрес и порт вашего Rasa сервера.

Эндпоинт
Анализ текста (NLU Parse)

URL: /model/parse

Метод: POST

Описание: Принимает текстовую строку и возвращает JSON-объект с результатами NLU-анализа, включая наиболее вероятное намерение и список извлеченных сущностей.

Headers:

Content-Type: application/json

Тело запроса (Request Body):
JSON-объект с одним обязательным ключом text.

{
  "text": "Текстовый запрос пользователя"
}


text (string, required): Текстовая строка, которую необходимо проанализировать.

Ответ (Response):

При успехе (Код 200 OK):
JSON-объект следующей структуры:

{
  "text": "Оригинальный текст запроса пользователя",
  "intent": {
    "name": "имя_наиболее_вероятного_интента",
    "confidence": 0.9985123872756958
  },
  "entities": [
    {
      "entity": "тип_сущности_1",
      "start": 6,  // начальный индекс сущности в "text"
      "end": 20,   // конечный индекс сущности в "text"
      "confidence_entity": 0.9701234567890123,
      "value": "извлеченное_значение_сущности_1",
      "extractor": "DIETClassifier"
    },
    {
      "entity": "тип_сущности_2",
      "start": 30,
      "end": 40,
      "confidence_entity": 0.9212345678901234,
      "value": "извлеченное_значение_сущности_2",
      "extractor": "DIETClassifier"
    }
    // ... другие извлеченные сущности
  ],
  "intent_ranking": [
    {
      "name": "имя_наиболее_вероятного_интента",
      "confidence": 0.9985123872756958
    },
    {
      "name": "имя_второго_по_вероятности_интента",
      "confidence": 0.0012345678901234567
    }
    // ... остальные интенты с их уверенностью
  ]
  // ... могут присутствовать другие поля, специфичные для Rasa,
  // но для базового использования достаточно указанных выше.
}

Описание полей ответа:

text (string): Оригинальный текст, отправленный в запросе.

intent (object): Объект, описывающий наиболее вероятное намерение.

name (string): Имя распознанного намерения (например, search_person, greet).

confidence (float): Уровень уверенности модели в этом намерении (от 0.0 до 1.0).

entities (array of objects): Массив объектов, где каждый объект представляет извлеченную сущность. Если сущности не найдены, массив будет пустым.

entity (string): Тип сущности (например, name, department, date).

start (integer): Начальный индекс (с 0) первого символа значения сущности в исходной строке text.

end (integer): Конечный индекс (не включая) последнего символа значения сущности в исходной строке text.

confidence_entity (float): Уровень уверенности модели в извлечении этой сущности.

value (string): Извлеченное текстовое значение сущности.

extractor (string): Имя компонента Rasa, который извлек эту сущность (например, DIETClassifier, RegexFeaturizer).

intent_ranking (array of objects): Массив всех возможных намерений, отсортированных по убыванию уверенности. Полезно для отладки или реализации более сложной логики.

При ошибке: Стандартные HTTP-коды ошибок (например, 4xx, 5xx) с JSON-телом, описывающим ошибку (зависит от конфигурации Rasa).

Текущие поддерживаемые Интенты и Сущности

На данный момент модель обучена распознавать следующие основные интенты и сущности (согласно domain.yml):

Интенты (Намерения):

greet: Приветствие.

goodbye: Прощание.

affirm: Утвердительный ответ.

deny: Отрицательный ответ.

bot_challenge: Проверка, является ли собеседник ботом.

search_person: Запрос на поиск сотрудника.

search_event: Запрос на поиск мероприятия.

find_birthday: Запрос на поиск дней рождения.

check_task: Запрос на проверку задач.

check_employment_calendar: Запрос на проверку календаря занятости.

Сущности (Entities):

name: Имя, фамилия или ФИО человека.

department: Название отдела.

project: Название проекта.

event_name: Название мероприятия.

date: Дата или период времени (например, "завтра", "в июне", "25 мая").

task_name: Название задачи.

(room_name): Упоминается в примерах NLU для check_employment_calendar, но не добавлена в секцию entities в domain.yml. Если планируется использовать, нужно добавить.

Примеры Запросов и Ответов
Пример 1: Поиск сотрудника

Запрос:

curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Найди Иванова Петра из отдела разработки"
  }'

Ожидаемый ответ (структура):

{
  "text": "Найди Иванова Петра из отдела разработки",
  "intent": {
    "name": "search_person",
    "confidence": 0.99...
  },
  "entities": [
    {
      "entity": "name",
      "start": 6,
      "end": 19,
      "confidence_entity": 0.98...,
      "value": "Иванова Петра",
      "extractor": "DIETClassifier"
    },
    {
      "entity": "department",
      "start": 29,
      "end": 39,
      "confidence_entity": 0.95...,
      "value": "разработки",
      "extractor": "DIETClassifier"
    }
  ],
  "intent_ranking": [
    { "name": "search_person", "confidence": 0.99... },
    // ...
  ]
}

Пример 2: Поиск мероприятия

Запрос:

curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Какие корпоративы будут на следующей неделе?"
  }'


Ожидаемый ответ (структура):

{
  "text": "Какие корпоративы будут на следующей неделе?",
  "intent": {
    "name": "search_event",
    "confidence": 0.97...
  },
  "entities": [
    {
      "entity": "event_name",
      "start": 6,
      "end": 17,
      "confidence_entity": 0.91...,
      "value": "корпоративы",
      "extractor": "DIETClassifier"
    },
    {
      "entity": "date",
      "start": 27,
      "end": 44,
      "confidence_entity": 0.89...,
      "value": "на следующей неделе", // Точное извлечение даты зависит от компонентов, например, Duckling
      "extractor": "DIETClassifier"  // или другой подходящий экстрактор
    }
  ],
  "intent_ranking": [
    { "name": "search_event", "confidence": 0.97... },
    // ...
  ]
}


Пример 3: Простой запрос без сущностей

Запрос:

curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Привет"
  }'


Ожидаемый ответ (структура):

{
  "text": "Привет",
  "intent": {
    "name": "greet",
    "confidence": 0.99...
  },
  "entities": [], // Сущности не найдены
  "intent_ranking": [
    { "name": "greet", "confidence": 0.99... },
    // ...
  ]
}

Пример 4: Запрос с синонимом

Запрос:

curl -X POST \
  http://localhost:5005/model/parse \
  -H 'Content-Type: application/json' \
  -d '{
    "text": "Где Женя из маркетинга?"
  }'

Ожидаемый ответ (структура):

{
  "text": "Где Женя из маркетинга?",
  "intent": {
    "name": "search_person",
    "confidence": 0.98...
  },
  "entities": [
    {
      "entity": "name",
      "start": 4,
      "end": 8,
      "confidence_entity": 0.96...,
      "value": "Евгений", // EntitySynonymMapper заменил "Женя" на "Евгений"
      "extractor": "DIETClassifier"
    },
    {
      "entity": "department",
      "start": 12,
      "end": 22,
      "confidence_entity": 0.93...,
      "value": "маркетинга",
      "extractor": "DIETClassifier"
    }
  ],
  "intent_ranking": [
    { "name": "search_person", "confidence": 0.98... },
    // ...
  ]
}

================================================================================

# Файл: config.yml
# Содержимое:
# The config recipe.
# https://rasa.com/docs/rasa/model-configuration/
recipe: default.v1

# The assistant project unique identifier
# This default value must be replaced with a unique assistant name within your deployment
assistant_id: 20250517-014538-moderato-primer # Рекомендуется сменить на уникальное имя вашего проекта

# Configuration for Rasa NLU.
# https://rasa.com/docs/rasa/nlu/components/
language: ru # <<< ИЗМЕНЕНО НА ru

pipeline:
   - name: WhitespaceTokenizer
   - name: RegexFeaturizer
   - name: LexicalSyntacticFeaturizer
   - name: CountVectorsFeaturizer
   - name: CountVectorsFeaturizer
     analyzer: char_wb
     min_ngram: 1
     max_ngram: 4
   - name: DIETClassifier
     epochs: 100 # Для реального проекта может потребоваться больше эпох и данных
     constrain_similarities: true
   - name: EntitySynonymMapper
   # ResponseSelector и FallbackClassifier не обязательны, если вы используете Rasa только для NLU
   # Но они не мешают, если вы вдруг решите добавить диалоговые функции.
   - name: ResponseSelector
     epochs: 100
     constrain_similarities: true
   - name: FallbackClassifier
     threshold: 0.5 # Можно настроить порог
     ambiguity_threshold: 0.1

# Configuration for Rasa Core.
# https://rasa.com/docs/rasa/core/policies/
# Если вы используете Rasa только для NLU, политики Core менее важны,
# но RulePolicy полезна для прямого вызова action после интента.
policies:
   - name: MemoizationPolicy
   - name: RulePolicy
     # Включите это, если хотите, чтобы RulePolicy обрабатывала события от кастомных actions
     # enable_fallback_prediction: True
   - name: UnexpecTEDIntentPolicy
     max_history: 5
     epochs: 100
   - name: TEDPolicy
     max_history: 5
     epochs: 100
     constrain_similarities: true

================================================================================

# Файл: credentials.yml
# Содержимое:
# This file contains the credentials for the voice & chat platforms
# which your bot is using.
# https://rasa.com/docs/rasa/messaging-and-voice-channels

rest:
#  # you don't need to provide anything here - this channel doesn't
#  # require any credentials


#facebook:
#  verify: "<verify>"
#  secret: "<your secret>"
#  page-access-token: "<your page access token>"

#slack:
#  slack_token: "<your slack token>"
#  slack_channel: "<the slack channel>"
#  slack_signing_secret: "<your slack signing secret>"

#socketio:
#  user_message_evt: <event name for user message>
#  bot_message_evt: <event name for bot messages>
#  session_persistence: <true/false>

#mattermost:
#  url: "https://<mattermost instance>/api/v4"
#  token: "<bot token>"
#  webhook_url: "<callback URL>"

# This entry is needed if you are using Rasa Enterprise. The entry represents credentials
# for the Rasa Enterprise "channel", i.e. Talk to your bot and Share with guest testers.
rasa:
  url: "http://localhost:5002/api"


================================================================================

# Файл: domain.yml
# Содержимое:
version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - bot_challenge
  - search_person:
      use_entities:
        - name
        - department
        - project # Теперь может иметь роль
        - age_exact
        - age_older_than
        - age_younger_than
        - birthday_specifier
        - skill # Новая сущность
  - search_event:
      use_entities:
        - event_name
        - date
  - find_birthday: # Этот интент остается для общего поиска ДР
      use_entities:
        - name
        - date
  - check_task:
      use_entities:
        - task_name
        - project
        - date
  - check_employment_calendar:
      use_entities:
        - name
        - date

entities:
  - name
  - department
  - project
  - event_name
  - date
  - task_name
  - age_exact
  - age_older_than
  - age_younger_than
  - birthday_specifier
  - skill

slots:
  name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: name
  department:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: department
  project:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: project
  event_name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: event_name
  date:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: date
  task_name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: task_name
  age_exact:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: age_exact
  age_older_than:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: age_older_than
  age_younger_than:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: age_younger_than
  birthday_specifier:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: birthday_specifier
  skill:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: skill

responses:
  utter_greet:
    - text: "Привет! Чем могу помочь?"
  utter_goodbye:
    - text: "До свидания!"
  utter_iamabot:
    - text: "Я AI-ассистент."
  utter_ask_details_person:
    - text: "Можете уточнить имя, фамилию, отдел, проект, навыки, возраст или информацию о дне рождения сотрудника?"
    - text: "Кого именно вы ищете? Пожалуйста, назовите имя, фамилию или другие известные детали, включая навыки, возраст или день рождения."
  utter_ask_details_event:
    - text: "Какое мероприятие или дата вас интересует?"
  utter_ask_details_task:
    - text: "Уточните название задачи, проекта или дату."
  utter_processing_request: # Общий ответ, который может быть использован перед вызовом action
    - text: "Понял, обрабатываю ваш запрос..."

actions:
  - action_process_request

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true

================================================================================

# Файл: domain.yml~
# Содержимое:
version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - bot_challenge
  - search_person:
      use_entities:
        - name
        - department
        - project
  - search_event:
      use_entities:
        - event_name
        - date
  - find_birthday:
      use_entities:
        - name
        - date
  - check_task:
      use_entities:
        - task_name
        - project
        - date
  - check_employment_calendar:
      use_entities:
        - name
        - date

entities:
  - name
  - department
  - project
  - event_name
  - date
  - task_name

slots:
  name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: name
  department:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: department
  project:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: project
  # ... (остальные слоты как в предыдущем ответе) ...
  event_name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: event_name
  date:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: date
  task_name:
    type: text
    influence_conversation: false
    mappings:
      - type: from_entity
        entity: task_name

responses:
  utter_greet:
    - text: "Привет! Чем могу помочь?"
  utter_goodbye:
    - text: "До свидания!"
  utter_iamabot:
    - text: "Я AI-ассистент."
  utter_ask_details_person:
    - text: "Можете уточнить имя, фамилию, отдел или проект сотрудника?"
    - text: "Кого именно вы ищете? Пожалуйста, назовите имя, фамилию или другие известные детали."
  # ... (остальные ответы как в предыдущем ответе) ...
  utter_ask_details_event:
    - text: "Какое мероприятие или дата вас интересует?"
  utter_ask_details_task:
    - text: "Уточните название задачи, проекта или дату."
  utter_processing_request:
    - text: "Понял, обрабатываю ваш запрос..."


actions:
  - action_process_request

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true

================================================================================

# Файл: endpoints.yml
# Содержимое:
# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/custom-actions

action_endpoint:
 url: "http://localhost:5055/webhook"

# Tracker store which is used to store the conversations.
# By default the conversations are stored in memory.
# https://rasa.com/docs/rasa/tracker-stores

#tracker_store:
#    type: redis
#    url: <host of the redis instance, e.g. localhost>
#    port: <port of your redis instance, usually 6379>
#    db: <number of your database within redis, e.g. 0>
#    password: <password used for authentication>
#    use_ssl: <whether or not the communication is encrypted, default false>

#tracker_store:
#    type: mongod
#    url: <url to your mongo instance, e.g. mongodb://localhost:27017>
#    db: <name of the db within your mongo instance, e.g. rasa>
#    username: <username used for authentication>
#    password: <password used for authentication>

# Event broker which all conversation events should be streamed to.
# https://rasa.com/docs/rasa/event-brokers

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue

================================================================================

# Файл: endpoints.yml~
# Содержимое:
# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/custom-actions

action_endpoint:
  urls:
    - "http://localhost:5055/webhook"
    - "http://localhost:5005/model/parse"

# Tracker store which is used to store the conversations.
# By default the conversations are stored in memory.
# https://rasa.com/docs/rasa/tracker-stores

#tracker_store:
#    type: redis
#    url: <host of the redis instance, e.g. localhost>
#    port: <port of your redis instance, usually 6379>
#    db: <number of your database within redis, e.g. 0>
#    password: <password used for authentication>
#    use_ssl: <whether or not the communication is encrypted, default false>

#tracker_store:
#    type: mongod
#    url: <url to your mongo instance, e.g. mongodb://localhost:27017>
#    db: <name of the db within your mongo instance, e.g. rasa>
#    username: <username used for authentication>
#    password: <password used for authentication>

# Event broker which all conversation events should be streamed to.
# https://rasa.com/docs/rasa/event-brokers

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue

================================================================================

# Файл: README.md
# Содержимое:
# Rasa-for-Unit-Hack

python 3.9

````
pip install rasa[spacy]
pip install rasa-sdk
pip install spacy
python -m spacy download ru_core_news_sm
pip install rasa[transformers] transformers
````

Запуск api (для бека):
````
rasa train (один раз после обновления репоза)
rasa run --enable-api --cors "*" -p 5005
````

Запуск:
````
rasa train
rasa run actions
rasa shell
````


================================================================================

# Файл: README.md~
# Содержимое:
# Rasa-for-Unit-Hack

python 3.9

````
pip install rasa[spacy]
pip install rasa-sdk
pip install spacy
python -m spacy download ru_core_news_sm
pip install rasa[transformers] transformers
````

Запуск:
````
rasa train
rasa run actions
rasa shell
````


================================================================================

# Файл: test_api.py
# Содержимое:
import requests
import json

rasa_url = "http://localhost:5005/model/parse"


def get_nlu_data(text_query):
    payload = {"text": text_query}
    try:
        response = requests.post(rasa_url, json=payload)
        response.raise_for_status()  # Проверка на HTTP ошибки
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Ошибка при обращении к Rasa NLU API: {e}")
        return None


if __name__ == "__main__":
    queries = [
        "Найди Анну Смирнову из IT",
        "Какие мероприятия завтра?",
        "У кого день рождения в июне?",
        "Привет",
        "Покажи мне Волкова Михаила",
        "телефон Кузнецова",
        "Сотрудник Лебедева Наталья из бухгалтерии в проекте Гамма"
    ]

    for query in queries:
        print(f"\nЗапрос: {query}")
        nlu_result = get_nlu_data(query)
        if nlu_result:
            print("Результат NLU:")
            print(f"  Текст: {nlu_result.get('text')}")
            intent = nlu_result.get('intent', {})
            print(f"  Интент: {intent.get('name')} (Confidence: {intent.get('confidence'):.4f})")

            entities = nlu_result.get('entities', [])
            if entities:
                print("  Сущности:")
                for entity in entities:
                    print(f"    - Тип: {entity.get('entity')}, Значение: '{entity.get('value')}', "
                          f"Confidence: {entity.get('confidence_entity', 'N/A'):.4f}")
            else:
                print("  Сущности: не найдены")
            # print(json.dumps(nlu_result, indent=2, ensure_ascii=False)) # Раскомментируйте для полного вывода JSON
        print("-" * 30)

================================================================================

# Файл: actions/actions.py
# Содержимое:
from typing import Any, Text, Dict, List
import logging
import json

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet  # Можем использовать для установки слотов, если понадобится

logger = logging.getLogger(__name__)


class ActionProcessRequest(Action):
    def name(self) -> Text:
        return "action_process_request"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        intent_name = tracker.latest_message['intent'].get('name')
        entities_from_tracker = tracker.latest_message.get('entities', [])

        # Формируем структурированные данные для отправки на бэкенд
        # Этот JSON будет содержать все детали для вашего бэкенда
        extracted_data_for_backend = {
            "intent": intent_name,
            "entities": [],  # Будет заполнен сущностями с их ролями
            "text": tracker.latest_message.get('text')
        }

        # Логирование и подготовка информации для ответа (если он нужен от action)
        log_message_parts = [f"Получен запрос с интентом: {intent_name}"]

        if not entities_from_tracker:
            log_message_parts.append("- Сущности не найдены.")
        else:
            log_message_parts.append("Извлеченные сущности:")
            for entity in entities_from_tracker:
                entity_info_for_backend = {
                    "entity": entity['entity'],
                    "value": entity['value'],
                    "start": entity.get('start'),
                    "end": entity.get('end')
                }
                if 'confidence_entity' in entity:
                    entity_info_for_backend['confidence'] = round(entity['confidence_entity'], 4)
                if 'role' in entity:
                    entity_info_for_backend['role'] = entity['role']
                if 'group' in entity:
                    entity_info_for_backend['group'] = entity['group']

                extracted_data_for_backend["entities"].append(entity_info_for_backend)

                # Формируем строку для лога
                role_str = f" (Роль: {entity['role']})" if 'role' in entity else ""
                log_message_parts.append(
                    f"- Тип: {entity['entity']}{role_str}, Значение: '{entity['value']}'"
                    f" (Confidence: {entity.get('confidence_entity', 'N/A'):.2f})"
                )

        final_log_message = "\n".join(log_message_parts)
        logger.info(f"Processing request: {tracker.latest_message.get('text')}\n{final_log_message}")
        # Логируем JSON, который будет отправлен на бэкенд (или который бэкенд получит от /model/parse)
        logger.info(
            f"Data structure for backend (from /model/parse or similar action output):\n{json.dumps(extracted_data_for_backend, ensure_ascii=False, indent=2)}")

        # --- Формирование ответа пользователю (для демонстрации в чате) ---
        # Этот блок нужен, если вы хотите, чтобы Rasa action отвечал в чат.
        # Если вы используете только /model/parse, этот блок не будет выполняться для внешних API запросов.

        response_message = f"✅ Ваш запрос (интент: {intent_name}) принят. "
        details_parts = []

        if intent_name == "search_person":
            # Собираем параметры из extracted_data_for_backend для формирования красивого ответа
            # Бэкенд будет использовать сам extracted_data_for_backend
            temp_search_params = {}
            projects_lead = []
            projects_participant = []
            skills = []

            for ent in extracted_data_for_backend["entities"]:
                entity_type = ent["entity"]
                entity_value = ent["value"]
                entity_role = ent.get("role")

                if entity_type == "project":
                    if entity_role == "lead":
                        projects_lead.append(entity_value)
                    else:  # Если роли нет или она другая, считаем участником
                        projects_participant.append(entity_value)
                elif entity_type == "skill":
                    skills.append(entity_value)
                elif entity_type not in temp_search_params:
                    temp_search_params[entity_type] = entity_value
                elif isinstance(temp_search_params[entity_type], list):
                    temp_search_params[entity_type].append(entity_value)
                else:
                    temp_search_params[entity_type] = [temp_search_params[entity_type], entity_value]

            if temp_search_params.get("name"): details_parts.append(f"Имя/ФИО: '{temp_search_params.get('name')}'")
            if temp_search_params.get("department"): details_parts.append(
                f"Отдел: '{temp_search_params.get('department')}'")
            if projects_participant: details_parts.append(f"Участие в проекте(ах): '{', '.join(projects_participant)}'")
            if projects_lead: details_parts.append(f"Руководство проектом(ами): '{', '.join(projects_lead)}'")
            if skills: details_parts.append(f"Навыки: '{', '.join(skills)}'")
            if temp_search_params.get("age_exact"): details_parts.append(
                f"Возраст: '{temp_search_params.get('age_exact')}'")
            if temp_search_params.get("age_older_than"): details_parts.append(
                f"Старше: '{temp_search_params.get('age_older_than')}' лет")
            if temp_search_params.get("age_younger_than"): details_parts.append(
                f"Младше: '{temp_search_params.get('age_younger_than')}' лет")
            if temp_search_params.get("birthday_specifier"): details_parts.append(
                f"День рождения: '{temp_search_params.get('birthday_specifier')}'")

            if details_parts:
                response_message = f"✅ Запрос на поиск сотрудника принят. Критерии: {'; '.join(details_parts)}."
            else:
                response_message = "✅ Запрос на поиск сотрудника принят (без уточняющих критериев)."

        elif intent_name == "search_event":
            event_name = next(
                (e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'event_name'),
                "не указано")
            event_date = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'date'),
                              "не указана")
            response_message = f"✅ Запрос на поиск мероприятия '{event_name}' (дата: '{event_date}') принят."

        elif intent_name == "find_birthday":
            person_name = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'name'),
                               "всех сотрудников")
            birthday_date = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'date'),
                                 "не указана")
            response_message = f"✅ Запрос на поиск дней рождения для '{person_name}' (дата/период: '{birthday_date}') принят."

        elif intent_name == "check_task":
            task_name = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'task_name'),
                             "не указана")
            project_name = next(
                (e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'project'), "не указан")
            task_date = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'date'),
                             "не указана")
            response_message = f"✅ Запрос на проверку задачи '{task_name}' (проект: '{project_name}', дата: '{task_date}') принят."

        elif intent_name == "check_employment_calendar":
            person_name = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'name'),
                               "не указан")
            calendar_date = next((e['value'] for e in extracted_data_for_backend["entities"] if e['entity'] == 'date'),
                                 "не указана")
            response_message = f"✅ Запрос на проверку календаря занятости для '{person_name}' (дата: '{calendar_date}') принят."

        elif intent_name == "greet":
            response_message = "Привет! Чем могу помочь?"
        elif intent_name == "goodbye":
            response_message = "До свидания!"
        elif intent_name == "affirm":
            response_message = "Понял."
        elif intent_name == "deny":
            response_message = "Хорошо."
        elif intent_name == "bot_challenge":
            response_message = "Я AI-ассистент, созданный для помощи в корпоративных задачах."
        # Добавьте другие специфичные ответы, если необходимо

        dispatcher.utter_message(text=response_message)

        # Если вы хотите, чтобы это действие возвращало структурированные данные через API Rasa (а не только через /model/parse),
        # то можно использовать dispatcher.utter_custom_json(extracted_data_for_backend)
        # Но для вашего случая (использование /model/parse) это не требуется.

        return []  # Никаких событий для изменения диалога не возвращаем, если это чисто NLU + Rules

================================================================================

# Файл: actions/actions.py~
# Содержимое:
from typing import Any, Text, Dict, List
import logging

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

# from rasa_sdk.events import SlotSet, UserUtteranceReverted # Не используются в текущей версии

logger = logging.getLogger(__name__)


class ActionProcessRequest(Action):
    def name(self) -> Text:
        return "action_process_request"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        intent_name = tracker.latest_message['intent'].get('name')
        entities = tracker.latest_message.get('entities', [])  # Убедимся, что entities всегда список

        # Формируем структурированные данные для возможной отправки вовне
        extracted_data = {
            "intent": intent_name,
            "entities": [],
            "text": tracker.latest_message.get('text')
        }

        # Сообщение для логирования и ответа пользователю (для демонстрации)
        log_message_parts = [f"Получен запрос с интентом: {intent_name}"]

        if not entities:
            log_message_parts.append("- Сущности не найдены.")
        else:
            log_message_parts.append("Извлеченные сущности:")
            for entity in entities:
                entity_info = {"entity": entity['entity'], "value": entity['value']}
                if 'group' in entity:  # для regex entities
                    entity_info['group'] = entity['group']
                if 'role' in entity:  # для roles
                    entity_info['role'] = entity['role']

                extracted_data["entities"].append(entity_info)
                log_message_parts.append(
                    f"- {entity['entity']}: {entity['value']} (confidence: {entity.get('confidence_entity', 'N/A'):.2f})")

        final_log_message = "\n".join(log_message_parts)
        logger.info(f"Processing request: {tracker.latest_message.get('text')}\n{final_log_message}")
        logger.info(f"Data to send to backend: {extracted_data}")

        # Ответ пользователю (для демонстрации)
        # dispatcher.utter_message(text=f"Обрабатываю ваш запрос: {tracker.latest_message.get('text')}")
        # dispatcher.utter_message(text=final_log_message) # Можно закомментировать, если не нужен такой подробный ответ в чате

        # Пример специфичной логики для search_person
        if intent_name == "search_person":
            # Собираем все значения для сущности 'name'
            names_found = [e['value'] for e in extracted_data["entities"] if e['entity'] == 'name']
            departments_found = [e['value'] for e in extracted_data["entities"] if e['entity'] == 'department']
            projects_found = [e['value'] for e in extracted_data["entities"] if e['entity'] == 'project']

            # Для простоты берем первое найденное имя, отдел, проект
            name_query = names_found[0] if names_found else "не указано"
            department_query = departments_found[0] if departments_found else "не указан"
            project_query = projects_found[0] if projects_found else "не указан"

            # Это сообщение можно использовать для отладки или как часть ответа
            # dispatcher.utter_message(
            #     text=f"Ищу сотрудника: Имя/Фамилия: '{name_query}', Отдел: '{department_query}', Проект: '{project_query}'."
            # )

            # Здесь ваша логика обращения к БД или API для поиска сотрудника
            # response_from_db = self.query_employee_db(name_query, department_query, project_query)
            # dispatcher.utter_message(text=response_from_db)
            # Для хакатона: просто подтверждаем получение данных
            dispatcher.utter_message(
                text=f"✅ Запрос на поиск сотрудника '{name_query}' (отдел: '{department_query}', проект: '{project_query}') принят.")


        elif intent_name == "search_event":
            event_names_found = [e['value'] for e in extracted_data["entities"] if e['entity'] == 'event_name']
            dates_found = [e['value'] for e in extracted_data["entities"] if e['entity'] == 'date']
            event_query = event_names_found[0] if event_names_found else "не указано"
            date_query = dates_found[0] if dates_found else "не указана"
            dispatcher.utter_message(
                text=f"✅ Запрос на поиск мероприятия '{event_query}' (дата: '{date_query}') принят.")

        # Добавьте обработку других интентов по аналогии
        else:
            # Общий ответ, если для интента нет специфичной логики выше
            dispatcher.utter_message(text=f"✅ Ваш запрос (интент: {intent_name}) принят к обработке.")

        # В реальном приложении здесь бы мог быть вызов вашего API:
        # requests.post("URL_ВАШЕГО_БЭКЕНДА", json=extracted_data)

        return []

    # def query_employee_db(self, name, department, project):
    #     # Заглушка для метода обращения к БД
    #     # В реальном приложении здесь будет код для запроса к вашей базе данных
    #     # Например, используя psycopg2, SQLAlchemy, requests к вашему API и т.д.
    #     logger.info(f"DB Query (simulated): Searching for Name='{name}', Department='{department}', Project='{project}'")
    #     # Пример ответа
    #     if name != "не указано":
    #         return f"Информация по сотруднику '{name}' найдена (симуляция)."
    #     return "Недостаточно данных для поиска сотрудника (симуляция)."

================================================================================

# Файл: actions/__init__.py
# Содержимое:


================================================================================

# Файл: data/nlu.yml
# Содержимое:
version: "3.1"

nlu:
  - intent: greet
    examples: |
      - привет
      - здравствуй
      - добрый день
      - хай
      - здорово
      - салют
      - доброе утро
      - добрый вечер

  - intent: goodbye
    examples: |
      - пока
      - до свидания
      - всего доброго
      - бай
      - чао
      - до встречи

  - intent: affirm
    examples: |
      - да
      - конечно
      - ага
      - угу
      - согласен
      - точно
      - верно

  - intent: deny
    examples: |
      - нет
      - неа
      - не думаю
      - вряд ли
      - не согласен
      - не верно

  - intent: bot_challenge
    examples: |
      - ты бот?
      - ты человек?
      - с кем я говорю?
      - ты программа?

  - intent: search_person
    examples: |
      # --- Базовые запросы по Имени/Фамилии/ФИО ---
      - Найди [Анну](name)
      - Где работает [Петр](name)?
      - Мне нужен [Сергей](name) из [IT](department)
      - Кто такая [Ольга](name) из [маркетинга](department)
      - Покажи [Виктора](name)
      - Ищу [Марию](name)
      - А где [Алексей](name)?
      - Как найти [Светлану](name)?
      - Мне бы [Дмитрия](name)
      - Найди мне [Наталью](name)
      - Покажите [Андрея](name)
      - Разыскивается [Ирина](name)

      # Только фамилия
      - Где найти [Смирнова](name)?
      - Мне нужен [Иванов](name) из [продаж](department) в проекте [Альфа](project)
      - Контакты [Кузнецова](name)
      - Кто такой [Петров](name) из [отдела кадров](department)?
      - [Васильев](name) в каком отделе?
      - Что известно о [Соколове](name)?
      - Фамилия [Михайлов](name), покажи его профиль
      - [Новиков](name), где он сидит?
      - Мне нужен некий [Федоров](name)
      - [Морозов](name) тут работает?
      - А [Волков](name) где?

      # Имя + Фамилия
      - Найди [Анну Смирнову](name)
      - Ищу [Петра Иванова](name) из [IT](department)
      - Покажи мне [Сергея Кузнецова](name) из отдела [продаж](department)
      - Где работает [Иван Попов](name) в проекте [Омега](project)?
      - Кто такой [Алексей Васильев](name)
      - Контакты [Ольги Петровой](name)
      - Телефон [Виктора Соколова](name)
      - Кабинет [Марии Михайловой](name)
      - Позовите [Константина Новикова](name)
      - Мне бы [Елену Федорову](name) из [бухгалтерии](department)
      - Как связаться с [Дмитрием Морозовым](name)?
      - [Светлана Волкова](name) в каком проекте?
      - [Михаил Алексеев](name) из [логистики](department)
      - Нужна [Наталья Лебедева](name)
      - Покажите [Андрея Семенова](name)
      - Разыскиваю [Ирину Егорову](name)

      # Фамилия + Имя
      - Найди [Новикова Константина](name)
      - Ищу [Федорову Елену](name) из [бухгалтерии](department)
      - Покажи мне [Морозова Дмитрия](name)
      - Сотрудник [Волков Михаил](name)
      - [Алексеева Михаила](name) контакты
      - [Лебедеву Наталью](name) где найти?
      - [Семенова Андрея](name) из [HR](department)
      - [Егорову Ирину](name) из проекта [Запуск](project)
      - Мне нужен [Попов Иван](name)
      - Где сидит [Васильев Алексей](name)?

      # Полное ФИО (если применимо)
      - Найди [Смирнова Анну Петровну](name)
      - Мне нужен [Иванов Петр Сергеевич](name)
      - Кто такой [Кузнецов Сергей Иванович](name) из [разработки](department)?
      - [Волков Михаил Андреевич](name), он у нас работает?
      - [Федорова Елена Дмитриевна](name), в каком она отделе?
      - [Петров Иван Алексеевич](name) из проекта [Квант](project)
      - Нужен [Сидоров Николай Викторович](name)

      # Использование "сотрудник", "коллега" и т.п.
      - Сотрудник [Алексеев](name) из [логистики](department)
      - Найди сотрудника [Лебедеву Наталью](name)
      - Мне нужен сотрудник [Семенов Андрей](name)
      - Коллега [Попова Мария](name), ее телефон
      - Человек по фамилии [Григорьев](name)
      - Есть ли у нас работник [Степанов](name)?
      - Ищу коллегу [Анну Власову](name)
      - Мне нужен специалист [Кирилл Зайцев](name)

      # Разные формулировки и падежи
      - Подскажи, где [Егорова Ирина](name)?
      - Хочу связаться с [Павлом Фроловым](name)
      - Нужна информация по [Екатерине Беловой](name) из проекта [Гамма](project)
      - Работает ли у нас [Максим Козлов](name)?
      - [Антон Мельников](name) еще в [финансах](department)?
      - У [Сидоровой Ольги](name) какой кабинет?
      - С [Петровым Иваном](name) можно поговорить?
      - О [Кузнецове Сергее](name) что-нибудь известно?
      - Это [Макаров Дмитрий](name)?
      - Дай мне телефон [Захаровой Анны](name)
      - Информация о [Беляеве Игоре](name)
      - Я ищу [Соловьеву Марину](name)

      # Имена в середине фразы
      - Из [отдела разработки](department) мне нужен [Дмитрий](name)
      - В проекте [Феникс](project) работает [Светлана Зайцева](name), найди ее
      - По [финансовому отделу](department) ищу [Наталью](name) [Лебедеву](name)
      - Можешь найти [Виктора](name) из [IT](department)?
      - В [HR](department) есть [Ольга](name)? Мне нужна [Ольга Смирнова](name).
      - Когда у [Петра](name) из [логистики](department) день рождения?

      # Сокращенные/уменьшительно-ласкательные имена (если не мапятся синонимами, DIET должен научиться)
      # Если есть синонимы, эти примеры помогут DIET правильно определить сущность 'name' до замены
      - Где [Женя](name) из [маркетинга](department)?
      - Позови [Сашу](name) из [продаж](department)
      - Мне нужен [Дима](name) [Петров](name)
      - [Маша](name) [Иванова](name) в каком проекте?
      - [Костя](name) [Новиков](name) еще здесь?
      - [Оля](name) [Волкова](name) из [бухгалтерии](department)
      - Как найти [Сережу](name) [Кузнецова](name)?
      - [Вася](name) [Пупкин](name)

      # --- Комбинации с возрастом ---
      - Найди [Марию](name) которой [25](age_exact) лет
      - Ищу сотрудника [Олега](name) возрастом [32](age_exact) года из [аналитики](department)
      - Покажи всех кому ровно [40](age_exact) в [отделе маркетинга](department)
      - Нужен [Иван](name) из [маркетинга](department), ему [28](age_exact)
      - Есть ли у нас [Светлана](name), [35](age_exact) лет, из проекта [Заря](project)?
      - Найди сотрудников старше [30](age_older_than) лет из [IT](department)
      - Покажи тех, кто старше [25](age_older_than) и работает над проектом [Инновация](project)
      - Мне нужны люди из [IT](department) старше [33](age_older_than), например [Алексей Петров](name)
      - [Алексей](name), которому больше [40](age_older_than) лет, он из [финансов](department)?
      - Кто в компании старше [50](age_older_than) и работает в [администрации](department)?
      - Найди сотрудников младше [30](age_younger_than) лет и фамилия [Сидоров](name)
      - Покажи тех, кто младше [25](age_younger_than) и его зовут [Анна](name)
      - Мне нужны люди из [разработки](department) младше [28](age_younger_than), особенно [Максим](name)
      - [Елена](name), которой меньше [35](age_younger_than) лет, работает в проекте [Оптимизация](project)?
      - Кто в компании младше [22](age_younger_than) и его фамилия [Иванов](name)?

      # --- Комбинации с днем рождения ---
      - Найди [Анну](name), у которой день рождения [в июне](birthday_specifier) и она из [маркетинга](department)
      - Ищу [Петра](name) с ДР [завтра](birthday_specifier), он работает в [IT](department)?
      - Сотрудники, родившиеся [15 мая](birthday_specifier) и участвующие в проекте [Сокол](project)
      - Кто из [маркетинга](department) отмечает день рождения [на следующей неделе](birthday_specifier), особенно [Мария](name)?
      - Покажи [Ольгу](name), если она родилась [в 1990 году](birthday_specifier) и работает в [финансовом отделе](department)
      - У кого день рождения [сегодня](birthday_specifier) из [разработчиков](department)?
      - Ищу тех, кто родился [зимой](birthday_specifier) и их фамилия [Морозов](name)
      - Найди [Виктора](name) [Семенова](name), день рождения [10 марта](birthday_specifier)
      - [Екатерина](name) из [отдела кадров](department), у которой ДР [в этом месяце](birthday_specifier)
      - Сотрудники с днем рождения [скоро](birthday_specifier) из проекта [Альфа](project)

      # --- Комбинации с ответственностью за проект (роль lead) ---
      - Кто из отдела [маркетинга](department) отвечает за проект "[SpringSale](project#lead)"? Его зовут [Иван](name)?
      - Назови ответственного за проект "[Новый Сайт](project#lead)", если это [Мария Петрова](name)
      - Мне нужен лид проекта "[Омега](project#lead)" из [разработки](department)
      - Кто главный по проекту "[Интеграция CRM](project#lead)", [Сергей](name) или [Ольга](name)?
      - Покажи [Анну](name) из [IT](department), если она руководит проектом "[Аналитика](project#lead)"
      - [Петров](name) [Иван](name) отвечает за проект "[Реструктуризация](project#lead)"?
      - Лид проекта "[Квартальный отчет](project#lead)" из [финансов](department), фамилия [Кузнецов](name)
      - Проект "[Мобильное приложение](project#lead)" - кто ответственный? Возможно, [Алексей](name)?
      - По проекту "[Обучение персонала](project#lead)" нужен главный, это [Светлана](name)?

      # --- Комбинации с навыками/технологиями ---
      - Кто у нас в команде работает с [Python](skill), например, [Дмитрий](name)?
      - Найди сотрудников, знающих [Java](skill) и [Spring](skill), из [отдела разработки](department)
      - Мне нужен дизайнер, владеющий [Figma](skill), по имени [Елена](name)
      - Кто из [IT](department) умеет работать с [Kubernetes](skill)? Особенно интересует [Михаил](name)
      - Покажи аналитиков с навыком [SQL](skill), таких как [Анна Смирнова](name)
      - Ищу разработчика на [JavaScript](skill) из проекта "[Фронтенд](project)", возможно [Павел](name)
      - Есть ли у нас эксперты по [машинному обучению](skill) в [R&D отделе](department)?
      - Сотрудники, которые знают [английский язык](skill) на уровне B2, из [международного отдела](department)
      - Найди [Марию](name) [Волкову](name), которая разбирается в [Go](skill)
      - Кто умеет писать на [C++](skill) и работает в [отделе исследований](department), например, [Андрей](name)?

      # --- Сложные комбинированные запросы ---
      - Найди [Сергея](name) из [IT](department) старше [30](age_older_than) лет, который знает [Java](skill)
      - Ищу [Марию](name) из [продаж](department), которой [27](age_exact) лет, день рождения [в августе](birthday_specifier) и она работает над проектом [Новые клиенты](project)
      - Покажи сотрудников младше [35](age_younger_than) из проекта [Альфа](project), которые умеют работать с [Excel](skill)
      - [Елена](name) из [бухгалтерии](department), ДР [в этом месяце](birthday_specifier), старше [40](age_older_than), ответственная за проект "[Годовой отчет](project#lead)"
      - Сотрудник [Иванов](name) [Петр](name), которому [25](age_exact) лет, день рождения [1 апреля](birthday_specifier) и навык [SQL](skill)
      - Кто из [разработки](department) старше [28](age_older_than), родился [летом](birthday_specifier) и знает [Python](skill)?
      - Найди [Анну Петрову](name) из [маркетинга](department), ей [33](age_exact), др [5 июля](birthday_specifier), и она работает с [Figma](skill)
      - Нужен [Java](skill)-разработчик из [отдела разработки](department), который отвечает за проект "[Миграция данных](project#lead)" и младше [35](age_younger_than) лет.
      - Кто из [маркетинга](department) знает [Photoshop](skill), у него день рождения [в июле](birthday_specifier) и он участвует в проекте [Летняя акция](project)?
      - Мне нужен [Python](skill) программист старше [25](age_older_than), работающий над проектом "[AI Ассистент](project#lead)" и его зовут [Олег](name).
      - Лид проекта "[Новый Продукт](project#lead)", который умеет работать с [Agile](skill) и его фамилия [Смирнов](name).
      - У кого [скоро](birthday_specifier) ДР из тех, кто знает [SQL](skill) и работает в [аналитическом отделе](department)?

      # --- Запросы с возможными опечатками или неполной информацией ---
      - Ишу [Олексея](name) [Васильева](name) из [АйТи](department)
      - Контакты [Мари Михайловой](name), она вроде из [продаж](department)
      - [Сергей Н.](name) из [разработки](department)
      - [Анна](name) фамилия [Кузнецова](name) или [Кузнецова](name) [Анна](name), отдел [HR](department)
      - Мне нужен [Петр](name), не помню фамилию, из [логистики](department)
      - [Сидоров](name)... кажется [Дмитрий](name)? Отдел [финансов](department).
      - Работник [Иванов](name), [20-30](age_range) лет, проект [Гамма](project). (age_range потребует дополнительной логики или Duckling)

  - synonym: Евгений
    examples: |
      - Женя
      - Женька
  - synonym: Александр
    examples: |
      - Саша
      - Шурик
  - synonym: Василий
    examples: |
      - Вася
  - synonym: Дмитрий
    examples: |
      - Дима
      - Митя
  - synonym: Мария
    examples: |
      - Маша
      - Маня
  - synonym: Ольга
    examples: |
      - Оля
  - synonym: Сергей
    examples: |
      - Сережа
      - Серж

  - intent: search_event
    examples: |
      - Какие мероприятия [завтра](date)?
      - Что у нас по [корпоративам](event_name)?
      - Когда будет [летний тимбилдинг](event_name)?
      - Покажи календарь мероприятий на [следующей неделе](date)
      - Будет ли [новогодний праздник](event_name) [в декабре](date)?
      - Расписание [тренингов](event_name)
      - Какие [события](event_name) запланированы на [25 мая](date)
      - Что интересного [в пятницу](date)?
      - Ищу [конференцию по AI](event_name)

  - intent: find_birthday # Общий поиск ДР
    examples: |
      - У кого день рождения [в этом месяце](date)?
      - Когда ДР у [Ивана Петрова](name)?
      - Дни рождения [в июне](date)
      - Покажи список именинников на [сегодня](date)
      - У [Анны](name) скоро день рождения?
      - Чьи дни рождения [на этой неделе](date)?
      - Кто отмечает ДР [завтра](date)?

  - intent: check_task
    examples: |
      - Какие у меня задачи по проекту [Гамма](project)?
      - Что с задачей [подготовить отчет](task_name)?
      - Проверь статус задачи [релиз новой версии](task_name) на [эту пятницу](date)
      - Мои задачи на [сегодня](date)
      - Какие задачи у [Сергея](name) по проекту [Феникс](project)?
      - Задачи по [проекту Омега](project)
      - Что там с [отчетом для клиента](task_name)?

  - intent: check_employment_calendar
    examples: |
      - Проверь занятость [Александра](name) на [завтра](date)
      - Свободен ли [Михаил](name) [10 июня в 3 часа дня](date)?
      - Календарь [Ольги](name)
      - Занятость переговорки [Альфа](room_name) на [вторник](date)
      - Когда [Мария](name) будет в офисе?
      - Кто доступен для встречи [в среду после обеда](date)?

================================================================================

# Файл: data/nlu.yml~
# Содержимое:
version: "3.1"

nlu:
  - intent: greet
    examples: |
      - привет
      - здравствуй
      - добрый день
      - хай
      - здорово
      - салют
      - доброе утро
      - добрый вечер

  - intent: goodbye
    examples: |
      - пока
      - до свидания
      - всего доброго
      - бай
      - чао
      - до встречи

  - intent: affirm
    examples: |
      - да
      - конечно
      - ага
      - угу
      - согласен
      - точно
      - верно

  - intent: deny
    examples: |
      - нет
      - неа
      - не думаю
      - вряд ли
      - не согласен
      - не верно

  - intent: bot_challenge
    examples: |
      - ты бот?
      - ты человек?
      - с кем я говорю?
      - ты программа?

  - intent: search_person
      examples: |
        # --- Базовые запросы по Имени/Фамилии/ФИО ---
        - Найди [Анну](name)
        - Где работает [Петр](name)?
        - Мне нужен [Сергей](name) из [IT](department)
        - Кто такая [Ольга](name) из [маркетинга](department)
        - Покажи [Виктора](name)
        - Ищу [Марию](name)
        - А где [Алексей](name)?
        - Как найти [Светлану](name)?
        - Мне бы [Дмитрия](name)
        - Найди мне [Наталью](name)
        - Покажите [Андрея](name)
        - Разыскивается [Ирина](name)

        # Только фамилия
        - Где найти [Смирнова](name)?
        - Мне нужен [Иванов](name) из [продаж](department) в проекте [Альфа](project)
        - Контакты [Кузнецова](name)
        - Кто такой [Петров](name) из [отдела кадров](department)?
        - [Васильев](name) в каком отделе?
        - Что известно о [Соколове](name)?
        - Фамилия [Михайлов](name), покажи его профиль
        - [Новиков](name), где он сидит?
        - Мне нужен некий [Федоров](name)
        - [Морозов](name) тут работает?
        - А [Волков](name) где?

        # Имя + Фамилия
        - Найди [Анну Смирнову](name)
        - Ищу [Петра Иванова](name) из [IT](department)
        - Покажи мне [Сергея Кузнецова](name) из отдела [продаж](department)
        - Где работает [Иван Попов](name) в проекте [Омега](project)?
        - Кто такой [Алексей Васильев](name)
        - Контакты [Ольги Петровой](name)
        - Телефон [Виктора Соколова](name)
        - Кабинет [Марии Михайловой](name)
        - Позовите [Константина Новикова](name)
        - Мне бы [Елену Федорову](name) из [бухгалтерии](department)
        - Как связаться с [Дмитрием Морозовым](name)?
        - [Светлана Волкова](name) в каком проекте?
        - [Михаил Алексеев](name) из [логистики](department)
        - Нужна [Наталья Лебедева](name)
        - Покажите [Андрея Семенова](name)
        - Разыскиваю [Ирину Егорову](name)

        # Фамилия + Имя
        - Найди [Новикова Константина](name)
        - Ищу [Федорову Елену](name) из [бухгалтерии](department)
        - Покажи мне [Морозова Дмитрия](name)
        - Сотрудник [Волков Михаил](name)
        - [Алексеева Михаила](name) контакты
        - [Лебедеву Наталью](name) где найти?
        - [Семенова Андрея](name) из [HR](department)
        - [Егорову Ирину](name) из проекта [Запуск](project)
        - Мне нужен [Попов Иван](name)
        - Где сидит [Васильев Алексей](name)?

        # Полное ФИО (если применимо)
        - Найди [Смирнова Анну Петровну](name)
        - Мне нужен [Иванов Петр Сергеевич](name)
        - Кто такой [Кузнецов Сергей Иванович](name) из [разработки](department)?
        - [Волков Михаил Андреевич](name), он у нас работает?
        - [Федорова Елена Дмитриевна](name), в каком она отделе?
        - [Петров Иван Алексеевич](name) из проекта [Квант](project)
        - Нужен [Сидоров Николай Викторович](name)

        # Использование "сотрудник", "коллега" и т.п.
        - Сотрудник [Алексеев](name) из [логистики](department)
        - Найди сотрудника [Лебедеву Наталью](name)
        - Мне нужен сотрудник [Семенов Андрей](name)
        - Коллега [Попова Мария](name), ее телефон
        - Человек по фамилии [Григорьев](name)
        - Есть ли у нас работник [Степанов](name)?
        - Ищу коллегу [Анну Власову](name)
        - Мне нужен специалист [Кирилл Зайцев](name)

        # Разные формулировки и падежи
        - Подскажи, где [Егорова Ирина](name)?
        - Хочу связаться с [Павлом Фроловым](name)
        - Нужна информация по [Екатерине Беловой](name) из проекта [Гамма](project)
        - Работает ли у нас [Максим Козлов](name)?
        - [Антон Мельников](name) еще в [финансах](department)?
        - У [Сидоровой Ольги](name) какой кабинет?
        - С [Петровым Иваном](name) можно поговорить?
        - О [Кузнецове Сергее](name) что-нибудь известно?
        - Это [Макаров Дмитрий](name)?
        - Дай мне телефон [Захаровой Анны](name)
        - Информация о [Беляеве Игоре](name)
        - Я ищу [Соловьеву Марину](name)

        # Имена в середине фразы
        - Из [отдела разработки](department) мне нужен [Дмитрий](name)
        - В проекте [Феникс](project) работает [Светлана Зайцева](name), найди ее
        - По [финансовому отделу](department) ищу [Наталью](name) [Лебедеву](name)
        - Можешь найти [Виктора](name) из [IT](department)?
        - В [HR](department) есть [Ольга](name)? Мне нужна [Ольга Смирнова](name).
        - Когда у [Петра](name) из [логистики](department) день рождения?

        # Сокращенные/уменьшительно-ласкательные имена (если не мапятся синонимами, DIET должен научиться)
        # Если есть синонимы, эти примеры помогут DIET правильно определить сущность 'name' до замены
        - Где [Женя](name) из [маркетинга](department)?
        - Позови [Сашу](name) из [продаж](department)
        - Мне нужен [Дима](name) [Петров](name)
        - [Маша](name) [Иванова](name) в каком проекте?
        - [Костя](name) [Новиков](name) еще здесь?
        - [Оля](name) [Волкова](name) из [бухгалтерии](department)
        - Как найти [Сережу](name) [Кузнецова](name)?
        - [Вася](name) [Пупкин](name)

        # --- Комбинации с возрастом ---
        - Найди [Марию](name) которой [25](age_exact) лет
        - Ищу сотрудника [Олега](name) возрастом [32](age_exact) года из [аналитики](department)
        - Покажи всех кому ровно [40](age_exact) в [отделе маркетинга](department)
        - Нужен [Иван](name) из [маркетинга](department), ему [28](age_exact)
        - Есть ли у нас [Светлана](name), [35](age_exact) лет, из проекта [Заря](project)?
        - Найди сотрудников старше [30](age_older_than) лет из [IT](department)
        - Покажи тех, кто старше [25](age_older_than) и работает над проектом [Инновация](project)
        - Мне нужны люди из [IT](department) старше [33](age_older_than), например [Алексей Петров](name)
        - [Алексей](name), которому больше [40](age_older_than) лет, он из [финансов](department)?
        - Кто в компании старше [50](age_older_than) и работает в [администрации](department)?
        - Найди сотрудников младше [30](age_younger_than) лет и фамилия [Сидоров](name)
        - Покажи тех, кто младше [25](age_younger_than) и его зовут [Анна](name)
        - Мне нужны люди из [разработки](department) младше [28](age_younger_than), особенно [Максим](name)
        - [Елена](name), которой меньше [35](age_younger_than) лет, работает в проекте [Оптимизация](project)?
        - Кто в компании младше [22](age_younger_than) и его фамилия [Иванов](name)?

        # --- Комбинации с днем рождения ---
        - Найди [Анну](name), у которой день рождения [в июне](birthday_specifier) и она из [маркетинга](department)
        - Ищу [Петра](name) с ДР [завтра](birthday_specifier), он работает в [IT](department)?
        - Сотрудники, родившиеся [15 мая](birthday_specifier) и участвующие в проекте [Сокол](project)
        - Кто из [маркетинга](department) отмечает день рождения [на следующей неделе](birthday_specifier), особенно [Мария](name)?
        - Покажи [Ольгу](name), если она родилась [в 1990 году](birthday_specifier) и работает в [финансовом отделе](department)
        - У кого день рождения [сегодня](birthday_specifier) из [разработчиков](department)?
        - Ищу тех, кто родился [зимой](birthday_specifier) и их фамилия [Морозов](name)
        - Найди [Виктора](name) [Семенова](name), день рождения [10 марта](birthday_specifier)
        - [Екатерина](name) из [отдела кадров](department), у которой ДР [в этом месяце](birthday_specifier)
        - Сотрудники с днем рождения [скоро](birthday_specifier) из проекта [Альфа](project)

        # --- Комбинации с ответственностью за проект (роль lead) ---
        - Кто из отдела [маркетинга](department) отвечает за проект "[SpringSale](project#lead)"? Его зовут [Иван](name)?
        - Назови ответственного за проект "[Новый Сайт](project#lead)", если это [Мария Петрова](name)
        - Мне нужен лид проекта "[Омега](project#lead)" из [разработки](department)
        - Кто главный по проекту "[Интеграция CRM](project#lead)", [Сергей](name) или [Ольга](name)?
        - Покажи [Анну](name) из [IT](department), если она руководит проектом "[Аналитика](project#lead)"
        - [Петров](name) [Иван](name) отвечает за проект "[Реструктуризация](project#lead)"?
        - Лид проекта "[Квартальный отчет](project#lead)" из [финансов](department), фамилия [Кузнецов](name)
        - Проект "[Мобильное приложение](project#lead)" - кто ответственный? Возможно, [Алексей](name)?
        - По проекту "[Обучение персонала](project#lead)" нужен главный, это [Светлана](name)?

        # --- Комбинации с навыками/технологиями ---
        - Кто у нас в команде работает с [Python](skill), например, [Дмитрий](name)?
        - Найди сотрудников, знающих [Java](skill) и [Spring](skill), из [отдела разработки](department)
        - Мне нужен дизайнер, владеющий [Figma](skill), по имени [Елена](name)
        - Кто из [IT](department) умеет работать с [Kubernetes](skill)? Особенно интересует [Михаил](name)
        - Покажи аналитиков с навыком [SQL](skill), таких как [Анна Смирнова](name)
        - Ищу разработчика на [JavaScript](skill) из проекта "[Фронтенд](project)", возможно [Павел](name)
        - Есть ли у нас эксперты по [машинному обучению](skill) в [R&D отделе](department)?
        - Сотрудники, которые знают [английский язык](skill) на уровне B2, из [международного отдела](department)
        - Найди [Марию](name) [Волкову](name), которая разбирается в [Go](skill)
        - Кто умеет писать на [C++](skill) и работает в [отделе исследований](department), например, [Андрей](name)?

        # --- Сложные комбинированные запросы ---
        - Найди [Сергея](name) из [IT](department) старше [30](age_older_than) лет, который знает [Java](skill)
        - Ищу [Марию](name) из [продаж](department), которой [27](age_exact) лет, день рождения [в августе](birthday_specifier) и она работает над проектом [Новые клиенты](project)
        - Покажи сотрудников младше [35](age_younger_than) из проекта [Альфа](project), которые умеют работать с [Excel](skill)
        - [Елена](name) из [бухгалтерии](department), ДР [в этом месяце](birthday_specifier), старше [40](age_older_than), ответственная за проект "[Годовой отчет](project#lead)"
        - Сотрудник [Иванов](name) [Петр](name), которому [25](age_exact) лет, день рождения [1 апреля](birthday_specifier) и навык [SQL](skill)
        - Кто из [разработки](department) старше [28](age_older_than), родился [летом](birthday_specifier) и знает [Python](skill)?
        - Найди [Анну Петрову](name) из [маркетинга](department), ей [33](age_exact), др [5 июля](birthday_specifier), и она работает с [Figma](skill)
        - Нужен [Java](skill)-разработчик из [отдела разработки](department), который отвечает за проект "[Миграция данных](project#lead)" и младше [35](age_younger_than) лет.
        - Кто из [маркетинга](department) знает [Photoshop](skill), у него день рождения [в июле](birthday_specifier) и он участвует в проекте [Летняя акция](project)?
        - Мне нужен [Python](skill) программист старше [25](age_older_than), работающий над проектом "[AI Ассистент](project#lead)" и его зовут [Олег](name).
        - Лид проекта "[Новый Продукт](project#lead)", который умеет работать с [Agile](skill) и его фамилия [Смирнов](name).
        - У кого [скоро](birthday_specifier) ДР из тех, кто знает [SQL](skill) и работает в [аналитическом отделе](department)?

        # --- Запросы с возможными опечатками или неполной информацией ---
        - Ишу [Олексея](name) [Васильева](name) из [АйТи](department)
        - Контакты [Мари Михайловой](name), она вроде из [продаж](department)
        - [Сергей Н.](name) из [разработки](department)
        - [Анна](name) фамилия [Кузнецова](name) или [Кузнецова](name) [Анна](name), отдел [HR](department)
        - Мне нужен [Петр](name), не помню фамилию, из [логистики](department)
        - [Сидоров](name)... кажется [Дмитрий](name)? Отдел [финансов](department).
        - Работник [Иванов](name), [20-30](age_range) лет, проект [Гамма](project). (age_range потребует дополнительной логики или Duckling)

  - synonym: Евгений
    examples: |
      - Женя
      - Женька
  - synonym: Александр
    examples: |
      - Саша
      - Шурик
  - synonym: Василий
    examples: |
      - Вася
  - synonym: Дмитрий
    examples: |
      - Дима
      - Митя
  - synonym: Мария
    examples: |
      - Маша
      - Маня
  - synonym: Ольга
    examples: |
      - Оля
  - synonym: Сергей
    examples: |
      - Сережа
      - Серж

  - intent: search_event
    examples: |
      - Какие мероприятия [завтра](date)?
      - Что у нас по [корпоративам](event_name)?
      - Когда будет [летний тимбилдинг](event_name)?
      - Покажи календарь мероприятий на [следующей неделе](date)
      - Будет ли [новогодний праздник](event_name) [в декабре](date)?
      - Расписание [тренингов](event_name)
      - Какие [события](event_name) запланированы на [25 мая](date)
      - Что интересного [в пятницу](date)?
      - Ищу [конференцию по AI](event_name)

  - intent: find_birthday # Общий поиск ДР
    examples: |
      - У кого день рождения [в этом месяце](date)?
      - Когда ДР у [Ивана Петрова](name)?
      - Дни рождения [в июне](date)
      - Покажи список именинников на [сегодня](date)
      - У [Анны](name) скоро день рождения?
      - Чьи дни рождения [на этой неделе](date)?
      - Кто отмечает ДР [завтра](date)?

  - intent: check_task
    examples: |
      - Какие у меня задачи по проекту [Гамма](project)?
      - Что с задачей [подготовить отчет](task_name)?
      - Проверь статус задачи [релиз новой версии](task_name) на [эту пятницу](date)
      - Мои задачи на [сегодня](date)
      - Какие задачи у [Сергея](name) по проекту [Феникс](project)?
      - Задачи по [проекту Омега](project)
      - Что там с [отчетом для клиента](task_name)?

  - intent: check_employment_calendar
    examples: |
      - Проверь занятость [Александра](name) на [завтра](date)
      - Свободен ли [Михаил](name) [10 июня в 3 часа дня](date)?
      - Календарь [Ольги](name)
      - Занятость переговорки [Альфа](room_name) на [вторник](date)
      - Когда [Мария](name) будет в офисе?
      - Кто доступен для встречи [в среду после обеда](date)?

================================================================================

# Файл: data/rules.yml
# Содержимое:
version: "3.1"

rules:
- rule: Say goodbye anytime the user says goodbye
  steps:
  - intent: goodbye
  - action: utter_goodbye

- rule: Say 'I am a bot' anytime the user challenges
  steps:
  - intent: bot_challenge
  - action: utter_iamabot

- rule: Greet user
  steps:
  - intent: greet
  - action: utter_greet

- rule: Process person search request
  steps:
  - intent: search_person
  - action: action_process_request

- rule: Process event search request
  steps:
  - intent: search_event
  - action: action_process_request

- rule: Process birthday find request
  steps:
  - intent: find_birthday
  - action: action_process_request

- rule: Process task check request
  steps:
  - intent: check_task
  - action: action_process_request

- rule: Process calendar check request # <<< ИЗМЕНЕНО НАЗВАНИЕ ИНТЕНТА
  steps:
  - intent: check_employment_calendar # <<< ИЗМЕНЕНО НАЗВАНИЕ ИНТЕНТА
  - action: action_process_request

================================================================================

# Файл: data/stories.yml
# Содержимое:
version: "3.1"

stories:
- story: поиск человека после приветствия
  steps:
  - intent: greet
  - action: utter_greet
  - intent: search_person
    entities: # Примеры сущностей для тестирования
    - name: "Анна"
    - department: "маркетинг"
  - action: action_process_request # Заменяем на наше новое действие

- story: поиск человека без приветствия
  steps:
    - intent: search_person
      entities:
      - name: "Петр"
    - action: action_process_request

- story: поиск мероприятия
  steps:
    - intent: greet
    - action: utter_greet
    - intent: search_event
      entities:
      - event_name: "корпоратив"
      - date: "завтра"
    - action: action_process_request

# Можно добавить больше историй для других интентов и сценариев

================================================================================

# Файл: data/lookups/names.txt
# Содержимое:
Анна
Петр
Сергей
Иван
Алексей
Ольга
Виктор
Мария
Константин
Елена
Дмитрий
Светлана
Михаил
Наталья
Андрей
Ирина

Смирнов
Иванов
Кузнецов
Попов
Васильев
Петров
Соколов
Михайлов
Новиков
Федоров
Морозов
Волков
Алексеев
Лебедев
Семенов
Егоров

Анна Смирнова
Петр Иванов
Сергей Кузнецов
Иван Попов
Алексей Васильев
Ольга Петрова
Виктор Соколов
Мария Михайлова
Константин Новиков
Елена Федорова
Дмитрий Морозов
Светлана Волкова
Михаил Алексеев
Наталья Лебедева
Андрей Семенов
Ирина Егорова


================================================================================

# Файл: data/lookups/skills.txt
# Содержимое:
Python
Java
Spring
Figma
Kubernetes
SQL
JavaScript
Go
C++
Photoshop
Excel
Power BI
машинное обучение
аналитика данных
управление проектами
английский язык
Scrum
Agile
Vue.js
React
Angular
Node.js
PHP
Ruby
Scala
Kotlin
Swift
Data Science
DevOps
QA
Тестирование
UX
UI
Product Management
Project Management
Business Analysis
Системный анализ
Frontend
Backend
Fullstack

================================================================================

# Файл: tests/test_stories.yml
# Содержимое:
stories:
- story: happy path - greet and search person
  steps:
  - user: |
      привет
    intent: greet
  - action: utter_greet
  - user: |
      Найди Виктора из отдела разработки
    intent: search_person
  - action: action_process_request # Убедитесь, что это ваше актуальное действие
  # Можно добавить ассерты на извлеченные слоты, если они заполняются
  # - slot_was_set:
  #   - name: "Виктор"
  #   - department: "разработки"

- story: search person directly
  steps:
  - user: |
      Контакты Ивана Сидорова
    intent: search_person
  - action: action_process_request

- story: search event
  steps:
  - user: |
      Какие мероприятия завтра?
    intent: search_event
  - action: action_process_request

# ... и так далее для других интентов

================================================================================

# Файл: tests/test_stories.yml~
# Содержимое:
#### This file contains tests to evaluate that your bot behaves as expected.
#### If you want to learn more, please see the docs: https://rasa.com/docs/rasa/testing-your-assistant

stories:
- story: happy path 1
  steps:
  - user: |
      hello there!
    intent: greet
  - action: utter_greet
  - user: |
      amazing
    intent: mood_great
  - action: utter_happy

- story: happy path 2
  steps:
  - user: |
      hello there!
    intent: greet
  - action: utter_greet
  - user: |
      amazing
    intent: mood_great
  - action: utter_happy
  - user: |
      bye-bye!
    intent: goodbye
  - action: utter_goodbye

- story: sad path 1
  steps:
  - user: |
      hello
    intent: greet
  - action: utter_greet
  - user: |
      not good
    intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - user: |
      yes
    intent: affirm
  - action: utter_happy

- story: sad path 2
  steps:
  - user: |
      hello
    intent: greet
  - action: utter_greet
  - user: |
      not good
    intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - user: |
      not really
    intent: deny
  - action: utter_goodbye

- story: sad path 3
  steps:
  - user: |
      hi
    intent: greet
  - action: utter_greet
  - user: |
      very terrible
    intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - user: |
      no
    intent: deny
  - action: utter_goodbye

- story: say goodbye
  steps:
  - user: |
      bye-bye!
    intent: goodbye
  - action: utter_goodbye

- story: bot challenge
  steps:
  - user: |
      are you a bot?
    intent: bot_challenge
  - action: utter_iamabot


================================================================================

